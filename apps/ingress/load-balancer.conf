<< define "oauth_locations" >>
  location /auth {
    proxy_pass       http://vault-proxy;
    proxy_set_header Host             $host;
    proxy_set_header X-Real-IP        $remote_addr;
    proxy_set_header X-Scheme         $scheme;
    # nginx auth_request includes headers but not body
    proxy_set_header Content-Length   "";
    proxy_pass_request_body           off;
  }

  location @login {
    return 307 https://auth.home.mattmoriarity.com/webauthn/login?redirect_uri=$scheme://$host$request_uri;
  }
<< end >>
<< define "oauth_request" >>
    auth_request /auth;
    error_page 401 = @login;

    auth_request_set $user        $upstream_http_x_auth_request_user;
    auth_request_set $auth_cookie $upstream_http_set_cookie;
    proxy_set_header X-Auth-Request-User  $user;
    add_header Set-Cookie $auth_cookie;
<< end >>

# https://github.com/envoyproxy/envoy/issues/2506#issuecomment-362558239
proxy_http_version 1.1;

map $http_upgrade $connection_upgrade { # WebSocket support
  default upgrade;
  '' '';
}

<< range .Upstreams >>
upstream << .Name >> {
  << if .IPHash >>ip_hash;
  << end >>
  << if .ConnectPort >>
  server 127.0.0.1:<< .ConnectPort >>;
  << else >>
  {{ range service << printf "%q" .ServiceName >> }}
  server {{ .Address }}:<< if .ServicePort >><< .ServicePort >><< else >>{{ .Port }}<< end >>;
  {{ else }}server 127.0.0.1:65535; # force a 502
  {{ end }}
  << end >>
}

<< end >>

server {
  listen 80 default_server;
  server_name _;

  location /healthz {
    return 200 'nginx is listening';
  }

  location / {
    return 301 https://$host$request_uri;
  }
}

<< range .VirtualHosts >>
server {
  listen 443 ssl;
  server_name << .Name >>.homelab << .Name >>.home.mattmoriarity.com;

  ssl_certificate /etc/nginx/ssl/<< .Name >>.homelab.pem;
  ssl_certificate_key /etc/nginx/ssl/<< .Name >>.homelab.pem;

  << .CustomServerConfig >>

  << if (not .DisableOAuth) >>
  << template "oauth_locations" >>
  << end >>

  location / {
    << if (not .DisableOAuth) >>
    << template "oauth_request" >>
    << end >>

    proxy_pass       << if .Upstream.Secure >>https<< else >>http<< end >>://<< .Upstream.Name >><< .Upstream.Path >>;
    << .CustomLocationConfig >>
  }
}
<< end >>

server {
  listen 80;
  server_name go;

  return 301 https://homelab.home.mattmoriarity.com/go$request_uri;
}

server {
  listen 443 ssl default_server;
  server_name homebase.homelab homebase.home.mattmoriarity.com;

  ssl_certificate /etc/nginx/ssl/homebase.homelab.pem;
  ssl_certificate_key /etc/nginx/ssl/homebase.homelab.pem;

  << template "oauth_locations" >>

  location /graphql {
    auth_request /auth;
    error_page 401 = @graphql_fallback;

    auth_request_set $user   $upstream_http_x_auth_request_user;
    proxy_set_header X-Auth-Request-User  $user;

    proxy_pass http://homebase-api;
  }

  # The GraphQL API can handle receiving requests that weren't authorized, and will check for
  # the X-Auth-* headers itself to determine permissions.
  location @graphql_fallback {
    proxy_pass http://homebase-api;
  }

  location /app {
    proxy_pass http://detect-presence;
    proxy_set_header Host $host;
  }

  location / {
    << template "oauth_request" >>

    proxy_pass http://homebase;
  }
}

server {
  listen 443 ssl;
  server_name gitlab.home.mattmoriarity.com;

  ssl_certificate /etc/nginx/ssl/gitlab.homelab.pem;
  ssl_certificate_key /etc/nginx/ssl/gitlab.homelab.pem;

  # To allow special characters in headers
  ignore_invalid_headers off;
  # Allow any size file to be uploaded.
  # Set to a value such as 1000m; to restrict file size to a specific value
  client_max_body_size 0;
  # To disable buffering
  proxy_buffering off;
  proxy_connect_timeout       300;
  proxy_send_timeout          300;
  proxy_read_timeout          300;
  send_timeout                300;

  location / {
    proxy_pass  http://10.0.2.32;
    proxy_redirect off;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $server_name;
  }
}
